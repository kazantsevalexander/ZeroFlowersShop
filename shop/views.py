from django.shortcuts import render, redirect, get_object_or_404
from .models import Product, Order, CartItem
import asyncio
from BAKbot import bot, ADMIN_CHAT_ID
from django.http import JsonResponse
from django.contrib.auth.decorators import login_required
from aiogram import Bot
from .forms import OrderForm
from asgiref.sync import async_to_sync

ADMIN_CHAT_ID = '6618330710'  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à ID —á–∞—Ç–∞
bot = Bot(token='7621395982:AAEBUp892ayfVzC0o0ZZJcwOvUtjJCiRVDo')  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞


# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤
async def send_telegram_message(message: str):
    try:
        await bot.send_message(ADMIN_CHAT_ID, message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")


def product_list(request):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    products = Product.objects.all()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cart_items = {}
    if request.user.is_authenticated:
        user_cart_items = CartItem.objects.filter(user=request.user)
        cart_items = {item.product.id: item.quantity for item in user_cart_items}

    return render(request, 'shop/product_list.html', {
        'products': products,
        'cart_items': cart_items  # –ü–µ—Ä–µ–¥–∞—á–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    })




def place_order(request):
    if request.method == 'POST':
        form = OrderForm(request.POST)
        if form.is_valid():
            order = form.save(commit=False)
            order.user = request.user  # –ü—Ä–∏–≤—è–∑–∫–∞ –∑–∞–∫–∞–∑–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            order.save()
            return redirect('product_list')  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    else:
        form = OrderForm()
    return render(request, 'shop/place_order.html', {'form': form})


def add_to_cart(request, product_id):
    if request.method == 'POST':
        product = get_object_or_404(Product, id=product_id)
        quantity = int(request.POST.get('quantity', 1))  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

        print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: –ü—Ä–æ–¥—É–∫—Ç ID={product_id}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ={quantity}")

        cart_item, created = CartItem.objects.get_or_create(
            user=request.user, product=product
        )
        if created:
            cart_item.quantity = quantity
        else:
            cart_item.quantity += quantity
        cart_item.save()

        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: –ü—Ä–æ–¥—É–∫—Ç ID={product_id}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ={cart_item.quantity}")

        cart_count = CartItem.objects.filter(user=request.user).count()
        return JsonResponse({'cart_count': cart_count})
    else:
        return JsonResponse({'error': 'Invalid request'}, status=400)


def view_cart(request):
    cart_items = CartItem.objects.filter(user=request.user)
    total = sum(item.total_price for item in cart_items)

    # –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    return render(
        request,
        'shop/view_cart.html',
        {
            'cart_items': cart_items,
            'total': total
        }
    )


def remove_from_cart(request, cart_item_id):
    cart_item = CartItem.objects.get(id=cart_item_id, user=request.user)
    cart_item.delete()
    return redirect('view_cart')


@login_required
def checkout(request):
    cart_items = CartItem.objects.filter(user=request.user)
    if not cart_items.exists():
        return redirect('product_list')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞

    if request.method == 'POST':
        delivery_address = request.POST.get('delivery_address')
        if delivery_address:
            total_price = 0
            order_details = []  # –û—á–∏—â–∞–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

            for item in cart_items:
                # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä–∑–∏–Ω—ã
                Order.objects.create(
                    user=request.user,
                    product=item.product,
                    quantity=item.quantity,
                    delivery_address=delivery_address,
                )
                total_price += item.quantity * item.product.price
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ –∏—Ç–æ–≥–æ–≤–æ–π —Ü–µ–Ω–æ–π –∑–∞ —Ç–æ–≤–∞—Ä
                order_details.append(
                    f"‚Ä¢ {item.product.name} √ó {item.quantity} —à—Ç. ‚Äî {item.quantity * item.product.price:.2f} BYN"
                )

            # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            cart_items.delete()

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
            message = (
                f"üå∏ –ù–û–í–´–ô –ó–ê–ö–ê–ó!\n\n"
                f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {request.POST['recipient_name']}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {request.POST['phone']}\n"
                f"üìß Email: {request.POST['email']}\n"
                f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {request.POST['delivery_address']}\n"
                f"\nüõçÔ∏è –°–û–°–¢–ê–í –ó–ê–ö–ê–ó–ê:\n" +
                "\n".join(order_details) +
                f"\n\nüí∞ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_price:.2f} BYN"
            )

            if request.POST.get('comments'):
                message += f"\n\n‚úèÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:\n{request.POST['comments']}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            async_to_sync(send_telegram_message)(message)

            return redirect('product_list')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞

    return render(request, 'shop/checkout.html', {'cart_items': cart_items})


