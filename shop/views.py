from django.shortcuts import render, redirect, get_object_or_404
from .models import Product, Order, OrderItem
from BAKbot import bot, ADMIN_CHAT_ID
from django.contrib.auth.decorators import login_required
from .forms import OrderForm
from django.contrib import messages
import requests
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json

ADMIN_CHAT_ID = '6618330710'
TELEGRAM_BOT_TOKEN = '7621395982:AAEBUp892ayfVzC0o0ZZJcwOvUtjJCiRVDo'

def send_telegram_message_sync(message: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': ADMIN_CHAT_ID,
        'text': message,
        'parse_mode': 'HTML'
    }
    try:
        response = requests.post(url, data=payload, timeout=10)
        response.raise_for_status()
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response.json()}")
    except requests.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")

def product_list(request):
    products = Product.objects.all()
    return render(request, 'shop/product_list.html', {'products': products})


def place_order(request):
    if request.method == 'POST':
        form = OrderForm(request.POST)
        if form.is_valid():
            order = form.save(commit=False)
            order.user = request.user  # –ü—Ä–∏–≤—è–∑–∫–∞ –∑–∞–∫–∞–∑–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            order.save()
            return redirect('product_list')  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    else:
        form = OrderForm()
    return render(request, 'shop/place_order.html', {'form': form})


def add_to_cart(request, product_id):
    if request.method == 'POST':
        product = get_object_or_404(Product, id=product_id)
        quantity = int(request.POST.get('quantity', 1))  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

        print(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ: –ü—Ä–æ–¥—É–∫—Ç ID={product_id}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ={quantity}")

        cart_item, created = OrderItem.objects.get_or_create(
            user=request.user, product=product
        )
        if created:
            cart_item.quantity = quantity
        else:
            cart_item.quantity += quantity
        cart_item.save()

        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: –ü—Ä–æ–¥—É–∫—Ç ID={product_id}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–æ—Ä–∑–∏–Ω–µ={cart_item.quantity}")

        cart_count = OrderItem.objects.filter(user=request.user).count()
        return JsonResponse({'cart_count': cart_count})
    else:
        return JsonResponse({'error': 'Invalid request'}, status=400)


def view_cart(request):
    cart = request.session.get('cart', {})

    cart_items = []
    total = 0

    for product_id, quantity in cart.items():
        try:
            product = Product.objects.get(id=int(product_id))
            cart_items.append({
                'product': product,
                'quantity': quantity,
                'total_price': product.price * quantity
            })
            total += product.price * quantity
        except Product.DoesNotExist:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã

    return render(request, 'shop/cart.html', {'cart_items': cart_items, 'total': total})


def remove_from_cart(request, product_id):
    cart = request.session.get('cart', {})

    if str(product_id) in cart:
        del cart[str(product_id)]

    request.session['cart'] = cart
    return redirect('cart')


@login_required
def checkout(request):
    cart = request.session.get('cart', {})

    if not cart:
        return redirect('cart')

    if request.method == 'POST':
        form = OrderForm(request.POST)
        if form.is_valid():
            order = form.save(commit=False)
            order.user = request.user

            # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            cart_items = []
            total_price = 0

            for product_id, quantity in cart.items():
                product = Product.objects.get(id=int(product_id))
                item_total = product.price * quantity
                total_price += item_total
                cart_items.append({
                    'product': product,
                    'quantity': quantity,
                    'total_price': item_total
                })

            order.total_price = total_price
            order.save()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            message = f"üõç –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}\n\n"
            message += f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {order.recipient_name}\n"
            message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
            message += f"üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_address}\n"

            if order.comments:
                message += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comments}\n"

            message += "\nüì¶ –¢–æ–≤–∞—Ä—ã:\n"

            for item in cart_items:
                message += f"- {item['product'].name} x{item['quantity']} = {item['total_price']}‚ÇΩ\n"

            message += f"\nüí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_price}‚ÇΩ"
            message += f"\nüìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
            send_telegram_message_sync(message)

            # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            request.session['cart'] = {}
            messages.success(request, '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!')
            return redirect('order_success', order_id=order.id)

    else:
        form = OrderForm()

    cart_items = [
        {
            'product': Product.objects.get(id=int(product_id)),
            'quantity': quantity,
            'total_price': Product.objects.get(id=int(product_id)).price * quantity,
        }
        for product_id, quantity in cart.items()
    ]

    total = sum(item['total_price'] for item in cart_items)

    return render(request, 'shop/checkout.html', {
        'form': form,
        'cart_items': cart_items,
        'total': total,
    })

def order_success(request, order_id):
    return render(request, 'shop/order_success.html', {'order_id': order_id})

def add_to_cart(request, product_id):
    product = get_object_or_404(Product, id=product_id)
    quantity = int(request.POST.get('quantity', 1))  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ —Ñ–æ—Ä–º—ã

    cart = request.session.get('cart', {})

    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —á–∏—Å–ª–æ–º
    if str(product_id) in cart:
        cart[str(product_id)] += quantity
    else:
        cart[str(product_id)] = quantity

    request.session['cart'] = cart
    request.session.modified = True  # –ü–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é

    messages.success(request, f'{product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É')
    return redirect('cart')

def remove_from_cart(request, product_id):
    cart = request.session.get('cart', {})
    if str(product_id) in cart:
        del cart[str(product_id)]
    request.session['cart'] = cart
    return redirect('cart')

def view_cart(request):
    cart = request.session.get('cart', {})

    cart_items = []
    total_price = 0
    total_quantity = 0

    for product_id, quantity in cart.items():
        product = Product.objects.get(id=int(product_id))
        cart_items.append({
            'product': product,
            'quantity': quantity,
            'total_price': product.price * quantity
        })
        total_price += product.price * quantity
        total_quantity += quantity  # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤

    return render(request, 'shop/cart.html', {
        'cart_items': cart_items,
        'total': total_price,
        'total_quantity': total_quantity  # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    })


@csrf_exempt
def update_cart(request, product_id):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            quantity = int(data.get('quantity', 1))

            cart = request.session.get('cart', {})
            cart[str(product_id)] = quantity
            request.session['cart'] = cart
            request.session.modified = True

            # –ü–µ—Ä–µ—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            total_price = sum(
                Product.objects.get(id=int(pid)).price * qty
                for pid, qty in cart.items()
            )
            total_quantity = sum(cart.values())

            return JsonResponse({
                'success': True,
                'total_quantity': total_quantity,
                'total_price': total_price
            })
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)}, status=400)
    return JsonResponse({'success': False, 'error': 'Invalid request'}, status=400)